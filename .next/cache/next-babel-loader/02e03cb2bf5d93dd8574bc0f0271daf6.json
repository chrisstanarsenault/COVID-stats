{"ast":null,"code":"import { useState, useEffect } from 'react';\nexport default function useStats(url) {\n  const {\n    0: stats,\n    1: setStats\n  } = useState();\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: error,\n    1: setError\n  } = useState();\n  useEffect(() => {\n    async function fetchData() {\n      setLoading(true);\n      setError();\n      const data = await fetch(url).then(res => res.json()).catch(err => setError(err));\n      setStats(data);\n      setLoading(false);\n    }\n\n    fetchData();\n  }, [url]);\n  return {\n    stats,\n    loading,\n    error\n  };\n}","map":{"version":3,"sources":["/Users/irepair/Desktop/Dev/Web Dev/Projects/rona/utils/useStats.js"],"names":["useState","useEffect","useStats","url","stats","setStats","loading","setLoading","error","setError","fetchData","data","fetch","then","res","json","catch","err"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,eAAe,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AACpC,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBL,QAAQ,EAAlC;AACA,QAAM;AAAA,OAACM,OAAD;AAAA,OAAUC;AAAV,MAAwBP,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM;AAAA,OAACQ,KAAD;AAAA,OAAQC;AAAR,MAAoBT,QAAQ,EAAlC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeS,SAAf,GAA2B;AACzBH,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,MAAAA,QAAQ;AACR,YAAME,IAAI,GAAG,MAAMC,KAAK,CAACT,GAAD,CAAL,CAAWU,IAAX,CAAgBC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAAvB,EAAmCC,KAAnC,CAAyCC,GAAG,IAAIR,QAAQ,CAACQ,GAAD,CAAxD,CAAnB;AACAZ,MAAAA,QAAQ,CAACM,IAAD,CAAR;AACAJ,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;;AACDG,IAAAA,SAAS;AACV,GATQ,EASN,CAACP,GAAD,CATM,CAAT;AAUA,SAAO;AAAEC,IAAAA,KAAF;AAASE,IAAAA,OAAT;AAAkBE,IAAAA;AAAlB,GAAP;AACD","sourcesContent":["import { useState, useEffect } from 'react';\n\nexport default function useStats(url) {\n  const [stats, setStats] = useState();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState();\n  useEffect(() => {\n    async function fetchData() {\n      setLoading(true);\n      setError();\n      const data = await fetch(url).then(res => res.json()).catch(err => setError(err));\n      setStats(data);\n      setLoading(false);\n    }  \n    fetchData();\n  }, [url])\n  return { stats, loading, error };\n}"]},"metadata":{},"sourceType":"module"}